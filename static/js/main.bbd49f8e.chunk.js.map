{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","src_components_Card","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_Searchbox","components_Scroll","components_ErrorBoundry","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","containers_App"],"mappings":"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","file":"static/js/main.bbd49f8e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Card.css';\r\n\r\nconst Card = ({name,email,id}) => {\r\n    return(\r\n        <div className=\"tc bg-light-green dib br4 pad3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"teste\" src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>     \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    \r\n    const cardComponent = robots.map((user,i) => {\r\n        return (\r\n            <Card  \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email}\r\n            />\r\n        );\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return(\r\n       <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type='search' \r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n            />\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from \"react\";\r\n\r\nconst Scroll = (props) =>\r\n{\r\n    return(\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component\r\n{\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch (error,info)\r\n    {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n\r\n        if (this.state.hasError)\r\n        {\r\n            return <h1>That is not Good</h1>\r\n        }\r\n\r\n        return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from \"react\";\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n    constructor ()\r\n    {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    componentDidMount () \r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>response.json())\r\n        .then(users => this.setState({robots:users}))\r\n    }\r\n\r\n    onSearchChange = (event) =>\r\n    {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() \r\n    {\r\n        const {robots, searchfield} = this.state;\r\n\r\n        const filteredRobots = robots.filter(robot => \r\n            {\r\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n            });\r\n\r\n        return !robots.length ? //IF TERNARIO\r\n        <h1 className=\"tc pa7 f1\">Loading...</h1>\r\n        :\r\n        (\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <Searchbox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n    </div>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}